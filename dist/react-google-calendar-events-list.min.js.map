{"version":3,"file":"react-google-calendar-events-list.min.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react';\nimport type Node from 'react';\nimport idx from 'idx.macro';\n\nconst GET_CAL_URL = (calID, key) =>\n  `https://www.googleapis.com/calendar/v3/calendars/${calID}/events?fields=items(summary,id,location,start)&key=${key}`;\n\nconst formatTime = (time: string): string => {\n  time = time.substring(0, time.length - 6); // eslint-disable-line\n  const parts = time.split(':');\n  const hour = parts[0];\n  const minutes = parts[1];\n  if (hour > 12) {\n    return (time = `${hour - 12}:${minutes}PM`); // eslint-disable-line\n  } else if (hour === 0) {\n    return (time = `${12}:${minutes}AM`); // eslint-disable-line\n  } else if (hour === 12) {\n    return (time += 'PM'); // eslint-disable-line\n  }\n  return (time += 'AM'); // eslint-disable-line\n};\n\nconst formatDate = (date) => {\n  date = date.split('-'); // eslint-disable-line\n  const eventYear = date.shift();\n  date.push(eventYear);\n  date = date.join('/'); // eslint-disable-line\n  return date;\n};\n\nexport type CalendarEventShape = {\n  id: string,\n  location?: string,\n  summary: string,\n  dateTime?: string,\n  date?: string,\n};\n\nexport type CalendarShape = {\n  calendarID: string,\n  apiKey: string,\n  children: (Array<CalendarEventShape>) => Node,\n};\n\nexport type CalendarStateShape = {\n  events: Array<CalendarEventShape>,\n};\n\nclass Calendar extends React.PureComponent<CalendarShape, CalendarStateShape> {\n  state = {\n    loading: false,\n    events: [],\n  };\n\n  componentDidMount() {\n    this.getEvents().then((data) => {\n      this.setState(state => ({\n        ...state,\n        loading: false,\n        events: idx(data, _ => _.items),\n      }));\n    });\n  }\n\n  getEvents = () => {\n    this.setState(state => ({\n      ...state,\n      events: [],\n      loading: true,\n    }));\n    return fetch(GET_CAL_URL(this.props.calendarID, this.props.apiKey)).then(\n      res => res.json(),\n    );\n  };\n\n  render() {\n    const { children } = this.props;\n    const { loading = false, events = [] } = this.state;\n    const currentEvents = events.filter(\n      event =>\n        (idx(event, _ => _.start.dateTime) || idx(event, _ => _.start.date)) >\n        new Date().toISOString(),\n    );\n\n    if (children && typeof children === 'function') {\n      return children({ events: currentEvents, loading });\n    }\n\n    return (\n      <div className=\"events\">\n        <dl className=\"events__list\">\n          {currentEvents.map(event => (\n            <div key={event.id} className=\"event\">\n              <dt data-test=\"event-summary\" className=\"event__title\">\n                {event.summary}\n              </dt>\n              {event.location && (\n                <span className=\"event__location\">\n                  <span>{event.location}</span>\n                </span>\n              )}\n              <dd className=\"event__details\">\n                <time\n                  className=\"event__schedule\"\n                  dateTime={event.start.dateTime || event.start.date}\n                >\n                  <span className=\"event__date\">\n                    {event.start.dateTime\n                      ? formatDate(event.start.dateTime.split('T')[0])\n                      : formatDate(event.start.date)}\n                  </span>\n                  {event.start.dateTime && (\n                    <span className=\"event__time\">\n                      {formatTime(event.start.dateTime.split('T')[1])}\n                    </span>\n                  )}\n                </time>\n              </dd>\n            </div>\n          ))}\n        </dl>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;\n"],"names":["GET_CAL_URL","calID","key","formatDate","date","eventYear","split","shift","push","join","state","getEvents","setState","fetch","_this","props","calendarID","apiKey","then","res","json","React","PureComponent","data","items","children","this","loading","events","currentEvents","filter","event","start","dateTime","Date","toISOString","className","map","id","data-test","summary","location","time","parts","substring","length","hour","minutes"],"mappings":"owBAIMA,EAAc,SAACC,EAAOC,6DAC0BD,yDAA4DC,GAiB5GC,EAAa,SAACC,OAEZC,KADCD,EAAKE,MAAM,MACKC,iBAClBC,KAAKH,KACHD,EAAKK,KAAK,4NAuBjBC,gBACW,eAcXC,UAAY,oBACLC,SAAS,oCACTF,sBAEM,MAEJG,MAAMb,EAAYc,EAAKC,MAAMC,WAAYF,EAAKC,MAAME,SAASC,KAClE,mBAAOC,EAAIC,oVAvBMC,EAAMC,8EAOpBX,YAAYO,KAAK,SAACK,KAChBX,SAAS,0CACTF,YACM,kBACGa,KAAaC,mDAiBrBC,EAAaC,KAAKX,MAAlBU,WACiCC,KAAKhB,UAAtCiB,QAAAA,oBAAiBC,OACnBC,oBAAuBC,OAC3B,qCACOC,eAAcC,SAAMC,uBAAiBF,eAAcC,SAAM5B,UAC9D,IAAI8B,MAAOC,uBAGXV,GAAgC,mBAAbA,EACdA,GAAWG,OAAQC,EAAeF,YAIzCN,uBAAKe,UAAU,gCACTA,UAAU,kBACGC,IAAI,mBACjBhB,uBAAKnB,IAAK6B,EAAMO,GAAIF,UAAU,+BACxBG,YAAU,gBAAgBH,UAAU,kBAC/BI,WAEFC,UACLpB,wBAAMe,UAAU,iDACDK,iCAGbL,UAAU,oDAEA,2BACAL,EAAMC,MAAMC,UAAYF,EAAMC,MAAM5B,8BAExCgC,UAAU,iBACPJ,MAAMC,SACT9B,EAAW4B,EAAMC,MAAMC,SAAS3B,MAAM,KAAK,IAC3CH,EAAW4B,EAAMC,MAAM5B,SAEtB4B,MAAMC,UACXZ,wBAAMe,UAAU,gBAzGhBM,EA0GcX,EAAMC,MAAMC,SAAS3B,MAAM,KAAK,GAxG1DqC,KADCD,EAAKE,UAAU,EAAGF,EAAKG,OAAS,IACpBvC,MAAM,KACnBwC,EAAOH,EAAM,GACbI,EAAUJ,EAAM,GAClBG,EAAO,GACSA,EAAO,OAAMC,OACb,IAATD,EACS,MAAMC,OACN,KAATD,EACDJ,EAAQ,KAEVA,EAAQ,UAZC,IAACA,EAEZC,EACAG,EACAC"}