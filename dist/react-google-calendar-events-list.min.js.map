{"version":3,"file":"react-google-calendar-events-list.min.js","sources":["../src/index.js"],"sourcesContent":["import React from 'react';\n\nconst GET_CAL_URL = (calID, key) =>\n  `https://www.googleapis.com/calendar/v3/calendars/${calID}/events?fields=items(summary,id,location,start)&key=${key}`;\n\nconst formatTime = (time: string): string => {\n  time = time.substring(0, time.length - 6); // eslint-disable-line\n  const parts = time.split(':');\n  const hour = parts[0];\n  const minutes = parts[1];\n  if (hour > 12) {\n    return (time = `${hour - 12}:${minutes}PM`); // eslint-disable-line\n  } else if (hour === 0) {\n    return (time = `${12}:${minutes}AM`); // eslint-disable-line\n  } else if (hour === 12) {\n    return (time += 'PM'); // eslint-disable-line\n  }\n  return (time += 'AM'); // eslint-disable-line\n};\n\nconst formatDate = (date) => {\n  date = date.split('-'); // eslint-disable-line\n  const eventYear = date.shift();\n  date.push(eventYear);\n  date = date.join('/'); // eslint-disable-line\n  return date;\n};\n\nexport type CalendarShape = {\n  calendarID: string,\n  apiKey: string,\n};\n\nexport type CalendarStateShape = {\n  events: Array<{\n    id: string,\n    location?: string,\n    summary: string,\n    dateTime?: string,\n    date?: string,\n  }>,\n};\n\nclass Calendar extends React.PureComponent<CalendarShape, CalendarStateShape> {\n  state = {\n    events: [],\n  };\n\n  componentDidMount() {\n    if (this.props.calendarID && this.props.apiKey) {\n      this.getEvents.then((data) => {\n        this.setState(state => ({\n          ...state,\n          events: data.items,\n        }));\n      });\n      return;\n    }\n    throw new Error('please provide an API key and Calendar ID');\n  }\n\n  getEvents = fetch(GET_CAL_URL(this.props.calendarID, this.props.apiKey)).then(\n    res => res.json(),\n  );\n\n  render() {\n    const { events } = this.state;\n    return (\n      <div className=\"events\">\n        <dl className=\"events__list\">\n          {events\n            .filter(\n              event =>\n                (event.start.dateTime || event.start.date) >\n                new Date().toISOString(),\n            )\n            .map(event => (\n              <div key={event.id} className=\"event\">\n                <dt data-test=\"event-summary\" className=\"event__title\">\n                  {event.summary}\n                </dt>\n                {event.location && (\n                  <span className=\"event__location\">\n                    <span>{event.location}</span>\n                  </span>\n                )}\n                <dd className=\"event__details\">\n                  <time\n                    className=\"event__schedule\"\n                    dateTime={event.start.dateTime || event.start.date}\n                  >\n                    <span className=\"event__date\">\n                      {event.start.dateTime\n                        ? formatDate(event.start.dateTime.split('T')[0])\n                        : formatDate(event.start.date)}\n                    </span>\n                    {event.start.dateTime && (\n                      <span className=\"event__time\">\n                        {formatTime(event.start.dateTime.split('T')[1])}\n                      </span>\n                    )}\n                  </time>\n                </dd>\n              </div>\n            ))}\n        </dl>\n      </div>\n    );\n  }\n}\n\nexport default Calendar;\n"],"names":["GET_CAL_URL","calID","key","formatDate","date","eventYear","split","shift","push","join","state","getEvents","fetch","_this","props","calendarID","apiKey","then","res","json","React","PureComponent","this","Error","data","setState","items","events","className","filter","event","start","dateTime","Date","toISOString","map","id","data-test","summary","location","time","parts","substring","length","hour","minutes"],"mappings":"owBAEMA,EAAc,SAACC,EAAOC,6DAC0BD,yDAA4DC,GAiB5GC,EAAa,SAACC,OAEZC,KADCD,EAAKE,MAAM,MACKC,iBAClBC,KAAKH,KACHD,EAAKK,KAAK,4NAoBjBC,oBAiBAC,UAAYC,MAAMZ,EAAYa,EAAKC,MAAMC,WAAYF,EAAKC,MAAME,SAASC,KACvE,mBAAOC,EAAIC,mVAnBQC,EAAMC,6EAMrBC,KAAKR,MAAMC,aAAcO,KAAKR,MAAME,aASlC,IAAIO,MAAM,kDARTZ,UAAUM,KAAK,SAACO,KACdC,SAAS,oCACTf,UACKc,EAAKE,iDAaXC,EAAWL,KAAKZ,MAAhBiB,cAENP,uBAAKQ,UAAU,gCACTA,UAAU,kBAETC,OACC,mBACGC,EAAMC,MAAMC,UAAYF,EAAMC,MAAM3B,OACrC,IAAI6B,MAAOC,gBAEdC,IAAI,mBACHf,uBAAKlB,IAAK4B,EAAMM,GAAIR,UAAU,+BACxBS,YAAU,gBAAgBT,UAAU,kBAC/BU,WAEFC,UACLnB,wBAAMQ,UAAU,iDACDW,iCAGbX,UAAU,oDAEA,2BACAE,EAAMC,MAAMC,UAAYF,EAAMC,MAAM3B,8BAExCwB,UAAU,iBACPG,MAAMC,SACT7B,EAAW2B,EAAMC,MAAMC,SAAS1B,MAAM,KAAK,IAC3CH,EAAW2B,EAAMC,MAAM3B,SAEtB2B,MAAMC,UACXZ,wBAAMQ,UAAU,gBA5FlBY,EA6FgBV,EAAMC,MAAMC,SAAS1B,MAAM,KAAK,GA3F5DmC,KADCD,EAAKE,UAAU,EAAGF,EAAKG,OAAS,IACpBrC,MAAM,KACnBsC,EAAOH,EAAM,GACbI,EAAUJ,EAAM,GAClBG,EAAO,GACSA,EAAO,OAAMC,OACb,IAATD,EACS,MAAMC,OACN,KAATD,EACDJ,EAAQ,KAEVA,EAAQ,UAZC,IAACA,EAEZC,EACAG,EACAC"}